{"version":3,"sources":["Components/Search/index.js","Components/Card/index.js","Components/Cards/index.js","Components/Main/index.js","Components/App/index.js","serviceWorker.js","index.js"],"names":["dietArray","name","value","Search","callback","useState","undefined","input","setInput","handleInputChange","e","currentTarget","useReducer","checkedDietArray","type","_pull","dispatch","formatQueryParams","params","healthQuery","map","item","toString","queryStringComponents","app_key","app_id","textInput","q","dietInput","diet","Object","keys","key","join","className","placeholder","id","required","onChange","defaultValue","onClick","preventDefault","alert","url","fetch","then","response","json","data","getResults","includes","htmlFor","Card","props","ingredientArray","ingredientLines","splice","src","image","alt","label","ingredient","i","length","slice","concat","truncateIngredient","Main","recipeArray","recipes","recipe","searchResults","setState","state","this","Cards","hits","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.4d856ea0.chunk.js","sourcesContent":["import React, { useState, useReducer } from 'react'\nimport _pull from 'lodash/pull'\n\nconst url = 'https://api.edamam.com/search?'\nconst appId = 'c8b6b757'\nconst appKey = '112f88722937558772de9b30b52b63ed'\n\nconst dietArray = [\n  {\n    name: 'Vegan',\n    value: 'vegan'\n  },\n  {\n    name: 'Vegetarian',\n    value: 'vegetarian'\n  },\n  {\n    name: 'Sugar Conscious',\n    value: 'sugar-conscious'\n  },\n  {\n    name: 'Peanut Free',\n    value: 'peanut-free'\n  },\n  {\n    name: 'Tree-nut Free',\n    value: 'tree-nut-free'\n  },\n  {\n    name: 'Alcohol Free',\n    value: 'alcohol-free'\n  }\n]\n\nconst Search = ({ callback }) => {\n  const [input, setInput] = useState(undefined)\n\n  const handleInputChange = e =>\n    setInput({\n      ...input,\n      [e.currentTarget.name]: e.currentTarget.value\n    })\n\n  const [checkedDietArray, dispatch] = useReducer(\n    (checkedDietArray, { type, value }) => {\n      switch (type) {\n        case 'add':\n          return [...checkedDietArray, value]\n        case 'remove':\n          return _pull(checkedDietArray, value)\n        default:\n          return checkedDietArray\n      }\n    },\n    []\n  )\n\n  function buildSearchQuery (e) {\n    e.preventDefault()\n    if (\n      input === undefined ||\n      input.textInput === undefined ||\n      input.textInput === ''\n    ) {\n      alert('You need to enter something into the text field.')\n      return null\n    }\n    const searchUrl = formatQueryParams(input)\n    getResults(searchUrl)\n\n    return formatQueryParams(input)\n  }\n\n  function getResults (url) {\n    fetch(url)\n      .then(response => response.json())\n      .then(data => callback(data))\n  }\n\n  function formatQueryParams (params) {\n    const healthQuery = checkedDietArray\n      .map(item => {\n        return `health=${item}&`\n      })\n      .toString()\n    const queryStringComponents = {\n      app_key: appKey,\n      app_id: appId\n    }\n\n    if (params.textInput !== '' || params.textInput !== undefined) {\n      queryStringComponents.q = params.textInput\n    }\n\n    if (params.dietInput !== '' && params.dietInput !== undefined) {\n      queryStringComponents.diet = params.dietInput\n    }\n\n    const queryString = Object.keys(queryStringComponents)\n      .map(key => `${key}=${queryStringComponents[key]}`)\n      .join('&')\n    const newUrl = url + healthQuery + queryString\n    return newUrl\n  }\n\n  return (\n    <div className='max-w-lg flex p-6 bg-gray-100 mt-10 rounded-lg shadow-md mx-auto'>\n      <div className='pt-1'>\n        <h1 className='text-xl text-blue-700 leading-tight'>\n          What do you want to use up?\n        </h1>\n        <p className='text-base text-gray-700 leading-normal'>\n          Type in the ingredients you're looking to clear out from your kitchen,\n          select a diet and click search.\n        </p>\n        <form className='mx-auto'>\n          <div className='flex flex-row justify-between'>\n            <input\n              className='rounded-sm border border-gray-600'\n              name='textInput'\n              type='text'\n              placeholder='Chicken, rice'\n              id='search-term'\n              required\n              onChange={handleInputChange}\n            />\n            <select\n              className='rounded-sm border-gray-600 border'\n              name='dietInput'\n              onChange={handleInputChange}\n            >\n              <option value='' defaultValue>\n                Diet\n              </option>\n              <option value='balanced'>Balanced</option>\n              <option value='high-protein'>High-Protein</option>\n              <option value='low-carb'>Low-Carb</option>\n              <option value='low-fat'>Low-Fat</option>\n            </select>\n            <input\n              type='submit'\n              value='Search'\n              className='rounded-sm border-gray-600 border'\n              onClick={buildSearchQuery}\n            />\n          </div>\n          <fieldset>\n            <legend className='text-lg'>Optional health choices:</legend>\n            <div className='grid grid-flow-col grid-cols-2 grid-rows-3'>\n              {dietArray.map(item => {\n                return (\n                  <div className='inline' key={item.value}>\n                    <input\n                      className='mx-1'\n                      type='checkbox'\n                      name={item.value}\n                      value={item.value}\n                      id={item.value}\n                      onChange={() =>\n                        dispatch({\n                          type: checkedDietArray.includes(item.value)\n                            ? 'remove'\n                            : 'add',\n                          value: item.value\n                        })\n                      }\n                    />\n                    <label className='text-base text-gray-700 leading-normal' htmlFor={item.value}>{item.name}</label>\n                  </div>\n                )\n              })}\n            </div>\n          </fieldset>\n        </form>\n      </div>\n    </div>\n  )\n}\n\nexport default Search\n","import React from 'react'\n\nfunction Card(props) {\n    const truncateIngredient = ingredient => {\n      if (ingredient.length < 25) {\n        return ingredient\n      } else {\n        const ingredientLine = ingredient.slice(0, 25)\n        return ingredientLine.concat('...')\n      }\n    }\n    const ingredientArray = props.ingredientLines.splice(0, 9)\n    return (\n      <div className='group flip h-64 min-w-full max-w-lg my-6 mx-auto'>\n        <div className='flip-content min-h-full h-64 min-w-full max-w-lg relative group-hover:transformation rounded-lg shadow-md'>\n          <div className='flip-card-front absolute min-h-full h-64 min-w-full max-w-lg bg-gray-100 rounded-lg shadow-md flex flex-row'>\n            <img\n              className='h-64 rounded-lg'\n              src={props.image}\n              alt={props.label}\n            />\n            <ul className='grid grid-cols-2 gid-row-5 gap-1 p-1 grid-flow-row max-w-md'>\n              {ingredientArray.map((ingredient, i) => {\n                return (\n                  <li className='text-sm text-left row-span-1' key={i}>\n                    {truncateIngredient(ingredient)}\n                  </li>\n                )\n              })}\n              {props.ingredientLines.length >= 9 ? (\n                <li className='text-sm text-left row-span-1'>\n                  and {props.ingredientLines.length - 8} more\n                  ingredients...\n                </li>\n              ) : null}\n            </ul>\n          </div>\n          <div className='flip-card-back absolute min-h-full min-w-full max-w-lg bg-gray-100 rounded-lg shadow-md'>\n            <h1 className='text-xl text-blue-700 leading-tight'>\n              {props.label}\n            </h1>\n            <ul className='grid grid-flow-row grid-cols-2 gap-1'>\n              {ingredientArray.map((ingredient, i) => {\n                return <li key={i}>{ingredient}</li>\n              })}\n              {props.ingredientLines.length >= 6 ? (\n                <li>\n                  and {props.ingredientLines.length - 5} more\n                  ingredients...\n                </li>\n              ) : null}\n            </ul>\n          </div>\n        </div>\n      </div>\n    )\n  }\n\nexport default Card\n","import React from 'react'\nimport Card from '../Card'\n\nfunction Main (props) {\n  const recipeArray = props.recipes\n  if (props.length === 0) {\n    return (\n      <div className='max-w-lg mx-auto flex p-6 bg-gray-100 mt-10 rounded-lg shadow-md'>\n        <h1 className='text-2xl text-blue-700 leading-tight'>\n          Sorry. No results were found. :(\n        </h1>\n        <h2 className='text-lg text-blue-700 leading-tight'>\n          Try changing your search terms or diet.\n        </h2>\n      </div>\n    )\n  }\n  return (\n    <div className='max-w-lg mx-auto flex flex-col mt-10'>\n      {recipeArray.map((item, i) => {\n        const recipe = item.recipe\n        return <Card key={i} {...recipe} />\n      })}\n    </div>\n  )\n}\nexport default Main\n","import React from 'react'\nimport Search from '../Search'\nimport Cards from '../Cards'\n\nclass Main extends React.Component {\n  constructor (props) {\n    super(props)\n    this.state = { searchResults: null }\n  }\n\n  searchResults = value => {\n    this.setState({ searchResults: value })\n  }\n\n  render () {\n    return (\n      <div>\n        <div className='max-w-lg mx-auto flex p-6 bg-gray-100 mt-10 rounded-lg shadow-md'>\n          <div className='pt-1'>\n            <h1 className='text-2xl text-blue-700 leading-tight'>\n              Clear the Fridge\n            </h1>\n            <p className='text-base text-gray-700 leading-normal'>\n              A project to help you get the most of whatever you have in your\n              fridge or pantry\n            </p>\n          </div>\n        </div>\n        <Search callback={this.searchResults} />\n        {this.state.searchResults !== null ? (\n          <Cards recipes={this.state.searchResults.hits} />\n        ) : null}\n      </div>\n    )\n  }\n}\n\nexport default Main\n","import React from 'react'\nimport Main from '../Main'\n\nfunction App () {\n  return <Main />\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './tailwind.output.css';\nimport App from './Components/App/';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}